/**
 * {{description}}
 * 
 * Complete solution with all test cases for execution
 */

// Import Node.js assert module
const assert = require('assert');

{{user_code}}

// Public test cases
const publicTestCases = {{{public_test_cases}}};

// Private test cases (hidden from user)
const privateTestCases = {{{private_test_cases}}};

// Combine all test cases for execution
const allTestCases = [...publicTestCases, ...privateTestCases];

// Test execution function with detailed results
function executeTests() {
    const results = {
        total: allTestCases.length,
        passed: 0,
        failed: 0,
        errors: 0,
        score: 0,
        details: [],
        publicTests: {
            total: publicTestCases.length,
            passed: 0
        },
        privateTests: {
            total: privateTestCases.length,
            passed: 0
        }
    };
    
    allTestCases.forEach((testCase, index) => {
        const isPublic = index < publicTestCases.length;
        const testResult = {
            index: index + 1,
            description: testCase.description || `Test case ${index + 1}`,
            status: 'failed',
            expected: testCase.expected,
            actual: null,
            error: null,
            isPublic: isPublic,
            executionTime: 0
        };
        
        const startTime = process.hrtime.bigint();
        
        try {
            const result = {{function_name}}(...testCase.input);
            const endTime = process.hrtime.bigint();
            testResult.executionTime = Number(endTime - startTime) / 1000000; // Convert to milliseconds
            testResult.actual = result;
            
            // Use assert for deep comparison
            assert.deepStrictEqual(result, testCase.expected);
            
            testResult.status = 'passed';
            results.passed++;
            
            if (isPublic) {
                results.publicTests.passed++;
            } else {
                results.privateTests.passed++;
            }
        } catch (error) {
            const endTime = process.hrtime.bigint();
            testResult.executionTime = Number(endTime - startTime) / 1000000;
            
            if (error instanceof assert.AssertionError) {
                testResult.status = 'failed';
                testResult.error = `Assertion failed: Expected ${JSON.stringify(testCase.expected)}, got ${JSON.stringify(testResult.actual)}`;
                results.failed++;
            } else {
                testResult.status = 'error';
                testResult.error = error.message;
                results.errors++;
            }
        }
        
        results.details.push(testResult);
    });
    
    // Calculate score (percentage of passed tests)
    results.score = Math.round((results.passed / results.total) * 100);
    
    return results;
}

// Execute tests and return results
try {
    const testResults = executeTests();
    console.log(JSON.stringify(testResults, null, 2));
    
    // Export for external use
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = { {{function_name}}, executeTests, testResults };
    }
} catch (error) {
    // Handle any unexpected errors
    const errorResult = {
        total: allTestCases.length,
        passed: 0,
        failed: 0,
        errors: allTestCases.length,
        score: 0,
        details: [],
        publicTests: { total: publicTestCases.length, passed: 0 },
        privateTests: { total: privateTestCases.length, passed: 0 },
        globalError: error.message
    };
    
    console.log(JSON.stringify(errorResult, null, 2));
}
