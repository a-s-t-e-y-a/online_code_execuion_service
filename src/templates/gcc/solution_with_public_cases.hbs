#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "cJSON.h"

{{{user_code}}}

// Public test cases JSON string
const char* publicTestCasesJson = "{{{jsonEscaped public_test_cases}}}";

// Test execution function
void executeTests() {
    cJSON* root = cJSON_Parse(publicTestCasesJson);
    if (!root) {
        printf("{\"error\": \"Failed to parse test cases JSON\"}\n");
        return;
    }

    int total = cJSON_GetArraySize(root);
    int passed = 0;
    int failed = 0;
    int errors = 0;

    // Execute test cases
    for (int i = 0; i < total; i++) {
        cJSON* testCase = cJSON_GetArrayItem(root, i);
        if (!testCase) {
            errors++;
            continue;
        }
        
        cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
        cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");
        
        if (!inputObj || !expectedObj) {
            errors++;
            continue;
        }
        
        // Simple approach: extract first parameter (most common case)
        // This can be extended for multiple parameters if needed
        cJSON* firstParam = NULL;
        cJSON* param = NULL;
        cJSON_ArrayForEach(param, inputObj) {
            firstParam = param;
            break; // Get first parameter
        }
        
        if (!firstParam) {
            errors++;
            continue;
        }
        
        // Call user function based on parameter type
        if (cJSON_IsString(firstParam)) {
            // String parameter
            char* inputVal = firstParam->valuestring;
            int result = {{function_name}}(inputVal);
            int expected = expectedObj->valueint;
            
            if (result == expected) {
                passed++;
            } else {
                failed++;
            }
        } else if (cJSON_IsNumber(firstParam)) {
            // Integer parameter
            int inputVal = firstParam->valueint;
            int result = {{function_name}}(inputVal);
            int expected = expectedObj->valueint;
            
            if (result == expected) {
                passed++;
            } else {
                failed++;
            }
        } else {
            errors++;
        }
    }

    printf("{\"total\": %d, \"passed\": %d, \"failed\": %d, \"errors\": %d}\n", total, passed, failed, errors);
    cJSON_Delete(root);
}
}

int main() {
    executeTests();
    return 0;
}