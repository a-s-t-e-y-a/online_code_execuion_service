#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "cJSON.h"

{{{user_code}}}

// Public test cases JSON string
const char* publicTestCasesJson = "{{{jsonEscaped public_test_cases}}}";

// Private test cases JSON string
const char* privateTestCasesJson = "{{{jsonEscaped private_test_cases}}}";

// Test execution function
void executeTests() {
    // Parse public test cases
    cJSON* publicRoot = cJSON_Parse(publicTestCasesJson);
    cJSON* privateRoot = cJSON_Parse(privateTestCasesJson);

    if (!publicRoot && !privateRoot) {
        printf("{\"error\": \"Failed to parse test cases JSON\"}\n");
        return;
    }

    int publicTotal = publicRoot ? cJSON_GetArraySize(publicRoot) : 0;
    int privateTotal = privateRoot ? cJSON_GetArraySize(privateRoot) : 0;
    int total = publicTotal + privateTotal;
    int passed = 0;
    int failed = 0;
    int errors = 0;

    // Execute public test cases
    if (publicRoot) {
        for (int i = 0; i < publicTotal; i++) {
            cJSON* testCase = cJSON_GetArrayItem(publicRoot, i);
            if (!testCase) {
                errors++;
                continue;
            }
            
            cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
            cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");
            
            if (!inputObj || !expectedObj) {
                errors++;
                continue;
            }
            
            // Simple approach: extract first parameter (most common case)
            cJSON* firstParam = NULL;
            cJSON* param = NULL;
            cJSON_ArrayForEach(param, inputObj) {
                firstParam = param;
                break; // Get first parameter
            }
            
            if (!firstParam) {
                errors++;
                continue;
            }
            
            // Call user function based on parameter type
            if (cJSON_IsString(firstParam)) {
                // String parameter
                char* inputVal = firstParam->valuestring;
                int result = {{function_name}}(inputVal);
                int expected = expectedObj->valueint;
                
                if (result == expected) {
                    passed++;
                } else {
                    failed++;
                }
            } else if (cJSON_IsNumber(firstParam)) {
                // Integer parameter
                int inputVal = firstParam->valueint;
                int result = {{function_name}}(inputVal);
                int expected = expectedObj->valueint;
                
                if (result == expected) {
                    passed++;
                } else {
                    failed++;
                }
            } else {
                errors++;
            }
        }
    }

    // Execute private test cases
    if (privateRoot) {
        for (int i = 0; i < privateTotal; i++) {
            cJSON* testCase = cJSON_GetArrayItem(privateRoot, i);
            if (!testCase) {
                errors++;
                continue;
            }
            
            cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
            cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");
            
            if (!inputObj || !expectedObj) {
                errors++;
                continue;
            }
            
            // Simple approach: extract first parameter (most common case)
            cJSON* firstParam = NULL;
            cJSON* param = NULL;
            cJSON_ArrayForEach(param, inputObj) {
                firstParam = param;
                break; // Get first parameter
            }
            
            if (!firstParam) {
                errors++;
                continue;
            }
            
            // Call user function based on parameter type
            if (cJSON_IsString(firstParam)) {
                // String parameter
                char* inputVal = firstParam->valuestring;
                int result = {{function_name}}(inputVal);
                int expected = expectedObj->valueint;
                
                if (result == expected) {
                    passed++;
                } else {
                    failed++;
                }
            } else if (cJSON_IsNumber(firstParam)) {
                // Integer parameter
                int inputVal = firstParam->valueint;
                int result = {{function_name}}(inputVal);
                int expected = expectedObj->valueint;
                
                if (result == expected) {
                    passed++;
                } else {
                    failed++;
                }
            } else {
                errors++;
            }
        }
    }

    printf("{\"total\": %d, \"passed\": %d, \"failed\": %d, \"errors\": %d}\n", total, passed, failed, errors);

    if (publicRoot) cJSON_Delete(publicRoot);
    if (privateRoot) cJSON_Delete(privateRoot);
}

int main() {
    executeTests();
    return 0;
}