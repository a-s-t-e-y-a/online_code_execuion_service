#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "cJSON.h"

{{{user_code}}}

// Public test cases JSON string
const char* publicTestCasesJson = "{{{jsonEscaped public_test_cases}}}";

// Private test cases JSON string
const char* privateTestCasesJson = "{{{jsonEscaped private_test_cases}}}";

// Test execution function
void executeTests() {
    // Parse test cases
    cJSON* publicRoot = cJSON_Parse(publicTestCasesJson);
    cJSON* privateRoot = cJSON_Parse(privateTestCasesJson);

    if (!publicRoot && !privateRoot) {
        printf("{\"error\": \"Failed to parse test cases JSON\"}\n");
        return;
    }

    int publicTotal = publicRoot ? cJSON_GetArraySize(publicRoot) : 0;
    int privateTotal = privateRoot ? cJSON_GetArraySize(privateRoot) : 0;
    int total = publicTotal + privateTotal;
    int passed = 0;
    int failed = 0;
    int errors = 0;
    int publicPassed = 0;
    int privatePassed = 0;

    // Execute public test cases first
    if (publicRoot) {
        for (int i = 0; i < publicTotal; i++) {
            cJSON* testCase = cJSON_GetArrayItem(publicRoot, i);
            if (!testCase) {
                errors++;
                continue;
            }
            
            cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
            cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");
            
            if (!inputObj || !expectedObj) {
                errors++;
                continue;
            }
            
            // Extract first input parameter (most common case)
            cJSON* firstInput = NULL;
            cJSON* inputParam = NULL;
            cJSON_ArrayForEach(inputParam, inputObj) {
                firstInput = inputParam;
                break;
            }
            
            if (!firstInput) {
                errors++;
                continue;
            }
            
            // Call function based on input type
            int testPassed = 0;
            if (cJSON_IsString(firstInput)) {
                // String input
                char* inputVal = firstInput->valuestring;
                if (cJSON_IsString(expectedObj)) {
                    char* result = {{function_name}}(inputVal);
                    if (result && strcmp(result, expectedObj->valuestring) == 0) {
                        testPassed = 1;
                    }
                } else if (cJSON_IsNumber(expectedObj)) {
                    int result = {{function_name}}(inputVal);
                    if (result == expectedObj->valueint) {
                        testPassed = 1;
                    }
                }
            } else if (cJSON_IsNumber(firstInput)) {
                // Numeric input
                int inputVal = firstInput->valueint;
                if (cJSON_IsNumber(expectedObj)) {
                    int result = {{function_name}}(inputVal);
                    if (result == expectedObj->valueint) {
                        testPassed = 1;
                    }
                } else if (cJSON_IsString(expectedObj)) {
                    char* result = {{function_name}}(inputVal);
                    if (result && strcmp(result, expectedObj->valuestring) == 0) {
                        testPassed = 1;
                    }
                }
            }
            
            if (testPassed) {
                passed++;
                publicPassed++;
            } else {
                failed++;
            }
        }
    }

    // Execute private test cases
    if (privateRoot) {
        for (int i = 0; i < privateTotal; i++) {
            cJSON* testCase = cJSON_GetArrayItem(privateRoot, i);
            if (!testCase) {
                errors++;
                continue;
            }
            
            cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
            cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");
            
            if (!inputObj || !expectedObj) {
                errors++;
                continue;
            }
            
            // Extract first input parameter (same logic as public)
            cJSON* firstInput = NULL;
            cJSON* inputParam = NULL;
            cJSON_ArrayForEach(inputParam, inputObj) {
                firstInput = inputParam;
                break;
            }
            
            if (!firstInput) {
                errors++;
                continue;
            }
            
            // Call function based on input type (same logic as public)
            int testPassed = 0;
            if (cJSON_IsString(firstInput)) {
                char* inputVal = firstInput->valuestring;
                if (cJSON_IsString(expectedObj)) {
                    char* result = {{function_name}}(inputVal);
                    if (result && strcmp(result, expectedObj->valuestring) == 0) {
                        testPassed = 1;
                    }
                } else if (cJSON_IsNumber(expectedObj)) {
                    int result = {{function_name}}(inputVal);
                    if (result == expectedObj->valueint) {
                        testPassed = 1;
                    }
                }
            } else if (cJSON_IsNumber(firstInput)) {
                int inputVal = firstInput->valueint;
                if (cJSON_IsNumber(expectedObj)) {
                    int result = {{function_name}}(inputVal);
                    if (result == expectedObj->valueint) {
                        testPassed = 1;
                    }
                } else if (cJSON_IsString(expectedObj)) {
                    char* result = {{function_name}}(inputVal);
                    if (result && strcmp(result, expectedObj->valuestring) == 0) {
                        testPassed = 1;
                    }
                }
            }
            
            if (testPassed) {
                passed++;
                privatePassed++;
            } else {
                failed++;
            }
        }
    }

    // Calculate score
    int score = total > 0 ? (passed * 100) / total : 0;

    // Output results in same format as JS
    printf("{\"total\": %d, \"passed\": %d, \"failed\": %d, \"errors\": %d, \"score\": %d, \"publicTests\": {\"total\": %d, \"passed\": %d}, \"privateTests\": {\"total\": %d, \"passed\": %d}}\n", 
           total, passed, failed, errors, score, publicTotal, publicPassed, privateTotal, privatePassed);

    if (publicRoot) cJSON_Delete(publicRoot);
    if (privateRoot) cJSON_Delete(privateRoot);
}

int main() {
    executeTests();
    return 0;
}