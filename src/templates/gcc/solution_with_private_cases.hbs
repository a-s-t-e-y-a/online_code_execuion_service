#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "cJSON.h"

{{{user_code}}}

// Public test cases JSON string
const char* publicTestCasesJson = "{{{jsonEscaped public_test_cases}}}";

// Private test cases JSON string
const char* privateTestCasesJson = "{{{jsonEscaped private_test_cases}}}";

{{#each languageSpecificParameters}}
{{#if (eq runtime "gcc")}}
// Test execution function
void executeTests() {
    cJSON* publicRoot = cJSON_Parse(publicTestCasesJson);
    cJSON* privateRoot = cJSON_Parse(privateTestCasesJson);

    if (!publicRoot && !privateRoot) {
        printf("{\"error\": \"Failed to parse test cases JSON\"}\n");
        return;
    }

    int publicTotal = publicRoot ? cJSON_GetArraySize(publicRoot) : 0;
    int privateTotal = privateRoot ? cJSON_GetArraySize(privateRoot) : 0;
    int total = publicTotal + privateTotal;
    int passed = 0;
    int failed = 0;
    int errors = 0;
    int publicPassed = 0;
    int privatePassed = 0;

    // Execute public test cases
    if (publicRoot) {
        for (int i = 0; i < publicTotal; i++) {
            cJSON* testCase = cJSON_GetArrayItem(publicRoot, i);
            if (!testCase) {
                errors++;
                continue;
            }

            cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
            cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");

            if (!inputObj || !expectedObj) {
                errors++;
                continue;
            }

            // Extract parameters
            {{#each parameters}}
            {{#if (eq type "int")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            int {{name}} = param_{{@index}}->valueint;
            {{else if (eq type "std::string")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            char* {{name}} = param_{{@index}}->valuestring;
            {{else if (eq type "char*")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            char* {{name}} = param_{{@index}}->valuestring;
            {{else if (eq type "string")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            char* {{name}} = param_{{@index}}->valuestring;
            {{else if (eq type "double")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            double {{name}} = param_{{@index}}->valuedouble;
            {{else if (eq type "float")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            float {{name}} = (float)param_{{@index}}->valuedouble;
            {{else if (eq type "bool")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            int {{name}} = cJSON_IsTrue(param_{{@index}});
            {{/if}}
            {{/each}}

            // Call function
            {{#if (eq return_type "int")}}
            int result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            int expected = expectedObj->valueint;
            int testPassed = (result == expected);
            {{else if (eq return_type "std::string")}}
            char* result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            char* expected = expectedObj->valuestring;
            int testPassed = (result && expected && strcmp(result, expected) == 0);
            {{else if (eq return_type "char*")}}
            char* result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            char* expected = expectedObj->valuestring;
            int testPassed = (result && expected && strcmp(result, expected) == 0);
            {{else if (eq return_type "string")}}
            char* result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            char* expected = expectedObj->valuestring;
            int testPassed = (result && expected && strcmp(result, expected) == 0);
            {{else if (eq return_type "double")}}
            double result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            double expected = expectedObj->valuedouble;
            int testPassed = (fabs(result - expected) < 1e-9);
            {{else if (eq return_type "float")}}
            float result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            float expected = (float)expectedObj->valuedouble;
            int testPassed = (fabsf(result - expected) < 1e-6);
            {{else if (eq return_type "bool")}}
            int result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            int expected = cJSON_IsTrue(expectedObj);
            int testPassed = (result == expected);
            {{/if}}

            if (testPassed) {
                passed++;
                publicPassed++;
            } else {
                failed++;
            }
        }
    }

    // Execute private test cases
    if (privateRoot) {
        for (int i = 0; i < privateTotal; i++) {
            cJSON* testCase = cJSON_GetArrayItem(privateRoot, i);
            if (!testCase) {
                errors++;
                continue;
            }

            cJSON* inputObj = cJSON_GetObjectItem(testCase, "input");
            cJSON* expectedObj = cJSON_GetObjectItem(testCase, "output");

            if (!inputObj || !expectedObj) {
                errors++;
                continue;
            }

            // Extract parameters
            {{#each parameters}}
            {{#if (eq type "int")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            int {{name}} = param_{{@index}}->valueint;
            {{else if (eq type "std::string")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            char* {{name}} = param_{{@index}}->valuestring;
            {{else if (eq type "char*")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            char* {{name}} = param_{{@index}}->valuestring;
            {{else if (eq type "string")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            char* {{name}} = param_{{@index}}->valuestring;
            {{else if (eq type "double")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            double {{name}} = param_{{@index}}->valuedouble;
            {{else if (eq type "float")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            float {{name}} = (float)param_{{@index}}->valuedouble;
            {{else if (eq type "bool")}}
            cJSON* param_{{@index}} = cJSON_GetObjectItem(inputObj, "{{name}}");
            if (!param_{{@index}}) { errors++; continue; }
            int {{name}} = cJSON_IsTrue(param_{{@index}});
            {{/if}}
            {{/each}}

            // Call function
            {{#if (eq return_type "int")}}
            int result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            int expected = expectedObj->valueint;
            int testPassed = (result == expected);
            {{else if (eq return_type "std::string")}}
            char* result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            char* expected = expectedObj->valuestring;
            int testPassed = (result && expected && strcmp(result, expected) == 0);
            {{else if (eq return_type "char*")}}
            char* result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            char* expected = expectedObj->valuestring;
            int testPassed = (result && expected && strcmp(result, expected) == 0);
            {{else if (eq return_type "string")}}
            char* result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            char* expected = expectedObj->valuestring;
            int testPassed = (result && expected && strcmp(result, expected) == 0);
            {{else if (eq return_type "double")}}
            double result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            double expected = expectedObj->valuedouble;
            int testPassed = (fabs(result - expected) < 1e-9);
            {{else if (eq return_type "float")}}
            float result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            float expected = (float)expectedObj->valuedouble;
            int testPassed = (fabsf(result - expected) < 1e-6);
            {{else if (eq return_type "bool")}}
            int result = {{../function_name}}({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
            int expected = cJSON_IsTrue(expectedObj);
            int testPassed = (result == expected);
            {{/if}}

            if (testPassed) {
                passed++;
                privatePassed++;
            } else {
                failed++;
            }
        }
    }

    // Calculate score
    int score = total > 0 ? (passed * 100) / total : 0;

    // Output results in same format as JS
    printf("{\"total\": %d, \"passed\": %d, \"failed\": %d, \"errors\": %d, \"score\": %d, \"publicTests\": {\"total\": %d, \"passed\": %d}, \"privateTests\": {\"total\": %d, \"passed\": %d}}\n",
           total, passed, failed, errors, score, publicTotal, publicPassed, privateTotal, privatePassed);

    if (publicRoot) cJSON_Delete(publicRoot);
    if (privateRoot) cJSON_Delete(privateRoot);
}
{{/if}}
{{/each}}

int main() {
    executeTests();
    return 0;
}